#!/bin/bash

# >> GLOBALES VARIABLES

SUCCESS=0
FAILURE=1

HELP="Usage: $0 [OPTION]... [COMMAND] [REQUEST]
OPTION:
  -h		display usage
  -f FILE	json database file
  -j		json formated output for select command"

# > JSON BDD Path

if [ -f "$HOME/.bdshrc" ]; then
        BDD_FILE="$(cat $HOME/.bdshrc)"
fi
if [ -f ".bdshrc" ]; then
        BDD_FILE="$(cat .bdshrc)"
fi

if [ "${BDSH_File}" != "" ]; then
        BDD_FILE="${BDSH_File}"
fi

FILE=""
DB_VALUE=""
JSON=$FAILURE
TABLE_VALUE=()

# >> Functions

function print_error {
    printf "%s\n" "$1" 1>&2
    return $FAILURE
}

function is_readable {
    if [ -r "$BDD_FILE" ]; then
        return $SUCCESS
    fi
    return $FAILURE
}

function is_writable {
    if [ -w "$BDD_FILE" ]; then
            return $SUCCESS
    fi
    return $FAILURE
}

function database_in_file {
    is_readable "$BDD_FILE"
    if [ $? == $FAILURE ]; then
        print_error "Error: '$BDD_FILE' unreadable."
        return $FAILURE
    fi

    grep -nwF "$DATABASE" <"$BDD_FILE" >/dev/null
    if [ $? == $FAILURE ]; then
        print_error "Error: '$1' not in '$BDD_FILE'"
        return $FAILURE
    fi
    return $SUCCESS
}

function get_value_from_table {
    res="$(grep -wF -- "$1" <<< $DB_VALUE | cut -d ':' -f2 | cat )"
    find_db_value "$DATABASE"
    if [ "$res" == "" ]; then
            print_error "Error: table '$1' doesn't exist in database '$DATABASE'."
            return $FAILURE
    fi
    TABLE_VALUE=()
    nb_lines=0
    for line in $res; do
            tmp=$line
            line=${line#" "}
            line=${line#"\""}
            line=${line%","}
            line=${line%"\""}
            if [[ ! $tmp =~ ^\".*$ ]]; then
                    let nb_lines--
                    TABLE_VALUE[$nb_lines]=${TABLE_VALUE[$nb_lines]%"\\\\"}
                    line=$(printf "%s%s" "${TABLE_VALUE[$nb_lines]}" "¿$line")
                    TABLE_VALUE[$nb_lines]=$line'\\'
            else
                    TABLE_VALUE+=($line'\\')
            fi
        let nb_lines++
    done
    return $SUCCESS
}

function select_db {
    change_bdd_file ""
    if [ $? == $FAILURE ]; then
            return $FAILURE
    fi
    if [ "$1" == "" ]; then
            print_error "$HELP"
            return $FAILURE
    fi
    DATABASE="data_$1"
    find_db_value "$DATABASE"
    if [ $? == $FAILURE ]; then
            return $FAILURE
    fi
    tables="$(tr ',' '\n' <<< $2)"
    if [ "$tables" == "" ]; then
            print_error "$HELP"
            return $FAILURE
    fi
    tables_arr=()
    max_len=()
    i=0
    lines=()
    first_line=""
    if [ $JSON == $SUCCESS ]; then
            printf "%s\n" "{"
    fi

    for table in $tables; do
        get_value_from_table "$table"
        if [ $? == $FAILURE ]; then
                return $FAILURE
        fi
        dict_value[$i]=${TABLE_VALUE[*]}
        tables_arr[$i]=$table
        if [ $JSON == $SUCCESS ]; then
                if [ $i != 0 ]; then
                        printf ",\n"
                fi
                k=0
                printf "\t\"%s\": [\n" "$table"
                for l in "${TABLE_VALUE[@]}"; do
                        if [ $k != 0 ]; then
                                printf ",\n"
                        fi
                        l=${l%"\\\\"}
                        printf "\t\t\"%s\"" "$l"
                        let k++
                done
                printf "\n\t]"
        fi
        lines[$i]=""
        let i++
    done

    if [ $JSON == $SUCCESS ]; then
            printf "\n%s\n" "}"
            return $SUCCESS
    fi

    f=0
    for index in "${!dict_value[@]}"; do
        max_len[$index]=${#tables_arr[$index]}
        for value in ${dict_value[$index]}; do
            if [ "$(expr ${#value} - 2)" -gt ${max_len[$index]} ]; then
                max_len[$index]=$(expr ${#value} - 2)
            fi
            let f++
        done
        if [ ${#tables_arr[*]} == 1 ]; then
            first_line+="$(printf "%-${max_len[$index]}s" "${tables_arr[$index]}")"
        elif [ $index == 0 ]; then
            first_line+="$(printf "%-${max_len[$index]}s  |" "${tables_arr[$index]}")"
        elif [ $index == "$(expr $i - 1)" ]; then
            first_line+="$(printf " %-${max_len[$index]}s" "${tables_arr[$index]}")"
        else
            first_line+="$(printf " %-${max_len[$index]}s  |" "${tables_arr[$index]}")"
        fi
        f=0
        for value in ${dict_value[$index]}; do
            value=${value%"\\\\"}
            if [ ${#tables_arr[*]} == 1 ]; then
                lines[$f]+="$(printf "%-${max_len[$index]}s" "$value")"
            elif [ $index == 0 ]; then
                lines[$f]+="$(printf "%-${max_len[$index]}s  |" "$value")"
            elif [ $index == "$(expr $i - 1)" ]; then
                lines[$f]+="$(printf " %-${max_len[$index]}s" "$value")"
            else
                lines[$f]+="$(printf " %-${max_len[$index]}s  |" "$value")"
            fi
            let f++
        done
    done

    printf "%s\n" "$first_line"
    for ((i=-2 ; i < ${#lines[0]} ; i++)); do
        printf "-"
    done
    printf "\n"
    if [ "$3" == "order" ]; then
            IFS=$'\n' lines=($(sort <<< "${lines[*]}"))
            unset IFS
    fi
    f=0
    for line in "${lines[@]}"; do
        line=$(sed 's/¿/ /g' <<< $line)
        printf "%s\n" "$line"
    done
    return $SUCCESS
}

function find_db_value {
    if [ "$(grep -nwF -- "$DATABASE" < $BDD_FILE)" == "" ]; then
            print_error "Error: database '$DATABASE' doesn't exist in '$BDD_FILE'."
            return $FAILURE
    fi
    START="$(grep -nwF -- "$DATABASE" < $BDD_FILE | cut -d ':' -f1)"
    LEN="$(expr "$(wc -l < $BDD_FILE | cut -d ' ' -f1)" - $START + 1)"
    END="$(expr "$(tail -n $LEN < $BDD_FILE | grep -nwF "]" | cut -d ':' -f1 | head -n 1)" - 1)"

    DB_VALUE="$(tail -n $LEN < $BDD_FILE | head -n $END)"
    return $SUCCESS
}

function describe_db {
    DATABASE="desc_$1"

    change_bdd_file ""
    if [ $? == $FAILURE ]; then
            return $FAILURE
    fi

    database_in_file "$1"
    if [ $? == $FAILURE ]; then
        return $FAILURE
    fi

    find_db_value "$DATABASE"
    for line in $DB_VALUE; do
        printf "%s\n" "$(echo $line | tr -d "\t, \"")"
    done
    return $SUCCESS
}

function is_creating_db {
        for var in "$@"
        do
                if [ "$var" = "create" ]; then
                        return $SUCCESS
                fi
        done
        return $ERROR
}

function change_bdd_file {
        if [ -e "$BDD_FILE" ]; then
                if [ -f "$BDD_FILE" ]; then
                        FILE="$(cat $BDD_FILE)"
                        return $SUCCESS
                else
                        print_error "Error: '$BDD_FILE' isn't a regular file."
                fi
        else
                is_creating_db "$@"
                if [ $? == $SUCCESS ]; then
                        return $SUCCESS
                fi
                print_error "Error: '$BDD_FILE' doesn't exist."
        fi
        return $FAILURE
}

function new_db {
        if [ ! -e "$BDD_FILE" ]; then
                printf "{\n\t\n}" >> "$BDD_FILE"
        else
                print_error "Error: '$BDD_FILE' already exists."
        fi
}

function create_table_attr {
        table_name="$1"
        shift
        arg=$(echo "$1" | tr "," "\n")
        last=0
        it=0
        for var in $arg
        do
                my_array["$it"]="$var"
                ((it++))
        done
        while [ "$it" -ne 0 ]
        do
                if [ "$last" == 0 ]; then
                        sed -i "/desc_"$table_name"\"/a\ \t\t\""${my_array["$it"-1]}"\"" "$BDD_FILE"
                else
                        sed -i "/desc_"$table_name"\"/a\ \t\t\""${my_array["$it"-1]}"\"\," "$BDD_FILE"
                fi
                last=1
                ((it--))
        done
}

function check_table {
        cat "$BDD_FILE" | grep -qwF "desc_"$1""
        if [ $? -eq 0 ]; then
                print_error "Error: '$1': Table already exist"
                exit 1
        fi

}

function is_db_empty {
        cat "$BDD_FILE" | grep -q desc
        return "$?"
}

function find_end_table {
    cat "$BDD_FILE" | grep -q "}]$"
}

function new_table {
        check_table "$1"
        is_db_empty
        if [ "$?" -eq 0 ]; then
                find_end_table
                if [ "$?" -eq 0 ]; then
                    sed -i "/]$/c \ \t}],\ \n\t\"desc_"$1"\": [\n\t],\n\t\"data_"$1"\": [\n\t]" "$BDD_FILE"
                else
                    sed -i "/]$/c \ \t],\ \n\t\"desc_"$1"\": [\n\t],\n\t\"data_"$1"\": [\n\t]" "$BDD_FILE"
                fi
        else
                sed -i "/{/a\ \t\"desc_"$1"\": [\n\t],\n\t\"data_"$1"\": [\n\t]" "$BDD_FILE"
        fi
        create_table_attr "$@"
        exit $?
}

function create_db {
        while [ $# != 0 ]; do
                case "$1" in
                        "database") new_db "$@";;
                        "table") shift
                                new_table "$@";;
                        *) print_error "Error: 'create': Bad argument"
                                exit $FAILURE;;
                esac
                shift
        done
}

function insert_db {
        DATABASE="desc_$1"
        database_in_file "$1"
        if [ "$?" == $FAILURE ]; then
                exit $FAILURE
        fi
        find_db_value
        table_name=$1
        shift
        args=()
        attr=$(tr "," "\n" <<< $1)
        for var in $attr
        do
                tmp="$(cut -d '=' -f1 <<< $var)"
                args+=("$var")
                grep -qwF "$tmp" <<< "$DB_VALUE"
                if [ "$?" == $FAILURE ]; then
                        print_error "Error: '$tmp' not in $BDD_FILE"
                        exit "$FAILURE"
                fi
        done
        desc_table=()
        for var in $DB_VALUE
        do
                var="$(tr -d "\t, \"" <<< $var)"
                desc_table+=($var)
        done

        line_index="$(grep -nwF "data_$table_name" < $BDD_FILE | cut -d ':' -f1)"
        len=$(expr "$(wc -l -- $BDD_FILE | cut -d ' ' -f1)" - $line_index + 1)
        tmp_file="$(tail -n $len < $BDD_FILE)"
        first_bracket="$(expr $(grep -nwF "]" <<< $tmp_file | head -n 1 | cut -d ':' -f1) + $line_index - 1)"

        sed -i "${first_bracket}c \ \t},\n{" "$BDD_FILE"

        for a in "${desc_table[@]}"; do
                new="\"$a\" : \"\""
                for b in "${args[@]}"; do
                        tmp="$(cut -d '=' -f1 <<< $b)"
                        if [ "$tmp" == "$a" ]; then
                                prop="$(cut -d '=' -f2 <<< $b)"
                                new="\"$a\": \"$prop\""
                        fi
                done
                sed -i "${first_bracket}a \ \t$new" "$BDD_FILE"
        done
        sed -i "${first_bracket}a \}" "$BDD_FILE"
        exit $SUCCESS
}

function main {
    while [ $# != 0 ]; do
        case "$1" in
            "-h") printf "%s\n" "$HELP"
                  return $SUCCESS;;
            "-f") shift
                  BDD_FILE="$1"
                  change_bdd_file "$@";;
            "-j") JSON=$SUCCESS;;
            "select") shift
                      select_db "$@"
                      if [ $? == $FAILURE ]; then
                              return $FAILURE
                      fi
                      shift
                      if [ "$2" == "order" ]; then
                              shift
                      fi;;
            "describe") shift
                        describe_db "$@";;
            "insert") shift
                        insert_db "$@";;
            "create") shift
                        create_db "$@"
                        shift;;
            *) print_error "Error: '$1': Bad argument"
                return $FAILURE;;
        esac
        if [ $? == $FAILURE ]; then
            return $FAILURE
        fi
        shift
    done

    return $SUCCESS
}

# >> Initialization

if [ $# == 0 ]; then
    print_error "$HELP"
else
    main "$@"
fi
