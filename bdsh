#!/bin/bash

# >> GLOBALES VARIABLES

SUCCESS=0
FAILURE=1

HELP="Usage: $0 [OPTION]... [COMMAND] [REQUEST]
OPTION:
  -h		display usage
  -f FILE	json database file
  -j		json formated output for select command"

# > JSON BDD Path

BDD_FILE="${BDSH_File}"

if [ -f ".bdshrc" ]; then
    BDD_FILE="$(cat .bdshrc)"
fi

FILE=""
TABLE=""

# >> Functions

function print_error {
    printf "%s\n" "$1" 1>&2
    return $FAILURE
}

function is_readable {
        if [ -r "$BDD_FILE" ]; then
                return $SUCCESS
        fi
        return $FAILURE
}

function is_writable {
        if [ -w "$BDD_FILE" ]; then
                return $SUCCESS
        fi
        return $FAILURE
}

function database_in_file {
        is_readable "$BDD_FILE"
        if [ $? == $FAILURE ]; then
                return $FAILURE
        fi

        grep -nwF "desc_$1" <"$BDD_FILE" >/dev/null
        if [ $? == $SUCCESS ]; then
                return $SUCCESS
        fi
        return $FAILURE
}

function select_db {
    DATABASE="$1"
    TABLE="$2"
    printf "%s - %s" "$DATABASE" "$TABLE"
}

function describe_db {
        DATABASE="$1"

        database_in_file "$DATABASE"
        if [ $? == $FAILURE ]; then
                return $FAILURE
        fi

        START="$(grep -nwF "desc_$DATABASE" < $BDD_FILE | cut -d ':' -f1)"
        LEN="$(expr "$(wc -l < $BDD_FILE | cut -d ' ' -f1)" - $START)"
        END="$(expr "$(tail -n $LEN < $BDD_FILE | grep -nwF "]" | cut -d ':' -f1 | head -n 1)" - 1)"

        TABLE="$(tail -n $LEN < $BDD_FILE | head -n $END | tr -d ", \"")"
        printf "%s\n" "$TABLE"
        return $SUCCESS
}

function change_bdd_file {
        if [ -e "$BDD_FILE" ]; then
                if [ -f "$BDD_FILE" ]; then
                        FILE="$(cat $BDD_FILE)"
                        return $SUCCESS
                else
                        print_error "Error: '$BDD_FILE' isn't a regular file."
                fi
        else
                print_error "Error: '$BDD_FILE' doesn't exist."
        fi
        return $FAILURE
}

function main {
    while [ $# != 0 ]; do
        case "$1" in
            "-h") printf "%s\n" "$HELP"
                  return $SUCCESS;;
            "-f") shift
                  BDD_FILE="$1"
                  change_bdd_file "$1";;
            "-j") ;;
            "select") shift
                      select_db "$@";;
            "describe") shift
                        describe_db "$@";;
            "insert") shift;;
            "create") shift;;
            *) return "$(print_error "Error: '$1': Bad argument")";;
        esac
        if [ $? == $FAILURE ]; then
                return $FAILURE
        fi
        shift
    done

    return $SUCCESS
}

# >> Initialization

if [ $# == 0 ]; then
        print_error "$HELP"
else
        main "$@"
fi
